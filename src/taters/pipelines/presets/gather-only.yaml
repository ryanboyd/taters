# ------------------------------------------------------------
# GLOBAL: Gather/aggregate features across all processed files
# ------------------------------------------------------------
vars:
  overwrite_existing: true

steps: 

  # 1) Gather DICTIONARY features into one CSV (no aggregation)
  - name: gather_dictionary_features
    scope: global
    call: potato.helpers.feature_gather.gather_csvs_to_one
    with:
      root_dir: "features/dictionary"
      # default output → features/dictionary.csv
      overwrite_existing: "{{var:overwrite_existing}}"

  # 2) Gather ARCHETYPE features into one CSV (no aggregation)
  - name: gather_archetype_features
    scope: global
    call: potato.helpers.feature_gather.gather_csvs_to_one
    with:
      root_dir: "features/archetypes"
      # default output → features/archetypes.csv
      overwrite_existing: "{{var:overwrite_existing}}"

  # 3) Aggregate WHISPER EMBEDDINGS by speaker (mean, std)
  #    - Per-file grouping prevents mixing identical speaker labels across different inputs.
  #    - Exclude time columns so they don't get averaged.
  - name: aggregate_whisper_embeddings_by_speaker
    scope: global
    call: potato.helpers.feature_gather.aggregate_features
    with:
      root_dir: "features/whisper-embeddings"
      # default output → features/whisper-embeddings.csv
      group_by: ["speaker"]
      per_file: true
      stats: ["mean", "std"]
      exclude_cols: ["start_time", "end_time"]
      overwrite_existing: "{{var:overwrite_existing}}"

  # 4) Aggregate SENTENCE EMBEDDINGS by speaker (mean, std)
  #    - If your sentence-embeddings CSVs don’t have a 'speaker' column,
  #      change group_by or add it upstream in extraction.
  - name: aggregate_sentence_embeddings_by_speaker
    scope: global
    call: potato.helpers.feature_gather.aggregate_features
    with:
      root_dir: "features/sentence-embeddings"
      # default output → features/sentence-embeddings.csv
      group_by: ["speaker"]
      per_file: true
      stats: ["mean", "std"]
      overwrite_existing: "{{var:overwrite_existing}}"
